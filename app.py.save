import streamlit as st
import numpy as np
import pandas as pd
import folium
import os
import logging
import sys
import io
import simplekml
from streamlit_folium import st_folium
from folium.plugins import Draw, Geocoder

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from drone_specs import DRONE_SPECS
from flight_calculator import generate_grid_path, validate_parameters
from utils import create_flight_path_plot
from map_utils import calculate_area_bounds
from dji_export import create_kml_file

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def meters_to_feet(meters): return meters * 3.28084
def feet_to_meters(feet): return feet / 3.28084
def mps_to_mph(mps): return mps * 2.23694
def mph_to_mps(mph): return mph / 2.23694

def create_map():
    map_ = folium.Map(
        location=[40.7128, -74.0060],
        zoom_start=13,
        control_scale=True,
        tiles="CartoDB positron"
    )
    Draw(export=True).add_to(map_)
    Geocoder(collapsed=False, add_marker=True).add_to(map_)
    return map_

def main():
    st.set_page_config(page_title="OpenFlightPlan", page_icon="üõ©Ô∏è", layout="wide")
    st.markdown("""
    <style>
        body { background-color: #fdfbff; color: #1f1f1f; font-family: 'Segoe UI', sans-serif; }
        .stButton>button { background-color: #7f00ff; color: white; font-weight: bold; border-radius: 5px; }
        .stSlider>div>div>div[role="slider"] { background-color: #ff00a6; }
        .stRadio>div>label { color: #7f00ff; }
        h1, h2, h3 { color: #7f00ff; }
        a { color: #7f00ff; text-decoration: none; font-weight: bold; }
    </style>
    """, unsafe_allow_html=True)

    col_logo, col_title, col_docs = st.columns([1,6,1])
    with col_logo: st.image("generated-icon.png", width=60)
    with col_title:
        st.markdown("""
        <div style='animation: fadeIn 1s ease-out;'>
            <h2 style='margin-bottom: 0;'>OpenFlightPlan</h2>
            <p style='color: #555;'>Mobile-first mission planning</p>
        </div>
        """, unsafe_allow_html=True)
    with col_docs:
        st.markdown("[üìö Docs](https://docs.openflightplan.io)", unsafe_allow_html=True)

    st.title("üõ©Ô∏è Flight Planner for Orthomosaic and 3D Model Creation")

    if 'flight_paths' not in st.session_state:
        st.session_state.flight_paths = {'north_south': None, 'east_west': None}
    if 'area_bounds' not in st.session_state:
        st.session_state.area_bounds = None

    col1, col2 = st.columns([2, 1])

    with col1:
        with st.spinner("Loading Map..."):
            map_instance = create_map()
            map_data = st_folium(map_instance, width=900, height=600)
            if st.button("üóëÔ∏è Clear Drawn Area"):
                st.session_state.area_bounds = None
                st.experimental_rerun()

            if map_data and 'last_active_drawing' in map_data:
                geometry = map_data['last_active_drawing']
                if geometry and isinstance(geometry, dict) and 'geometry' in geometry:
                    st.session_state.area_bounds = calculate_area_bounds(geometry['geometry'])
                    if st.session_state.area_bounds:
                        st.success(f"‚úÖ AOI Captured: {st.session_state.area_bounds['width']:.1f} √ó {st.session_state.area_bounds['height']:.1f} m")

    with col2:
        st.subheader("‚öôÔ∏è Flight Parameters")
        altitude = feet_to_meters(st.number_input("Altitude (ft)", value=164)) if st.selectbox("Altitude Unit", ["meters", "feet"]) == "feet" else st.number_input("Altitude (m)", value=50)
        speed = mph_to_mps(st.number_input("Speed (mph)", value=11)) if st.selectbox("Speed Unit", ["m/s", "mph"]) == "mph" else st.number_input("Speed (m/s)", value=5)
        overlap = st.slider("Front Overlap", 0.0, 1.0, 0.8)
        sidelap = st.slider("Side Overlap", 0.0, 1.0, 0.7)
        interval = st.number_input("Interval (s)", value=2)
        fov = st.number_input("FOV (¬∞)", value=85)
        direction = st.radio("Flight Path Direction", ["north_south", "east_west"], format_func=lambda x: x.replace("_", "-").title())

<<< HEAD
        if st.button("Generate Flight Plan"):
=======
        altitude_unit = st.selectbox("Altitude Unit", ["meters", "feet"], key="altitude_unit")
        altitude = st.number_input("Altitude", min_value=1, value=50) if altitude_unit == "meters" else feet_to_meters(
            st.number_input("Altitude (ft)", min_value=3, value=164))

        speed_unit = st.selectbox("Speed Unit", ["m/s", "mph"], key="speed_unit")
        speed = st.number_input("Speed", min_value=1, value=5) if speed_unit == "m/s" else mph_to_mps(
            st.number_input("Speed (mph)", min_value=2, value=11))

        overlap = st.slider("Front Overlap (%)", 0.0, 1.0, 0.8)
        sidelap = st.slider("Side Overlap (%)", 0.0, 1.0, 0.7)
        interval = st.number_input("Camera Interval (s)", min_value=1, value=2)
        fov = st.number_input("Camera Field of View (¬∞)", min_value=10, value=85)

        waypoint_action = st.selectbox(
            "Waypoint Action",
            ["Take Picture", "Start Recording", "Stop Recording"],
            help="Action performed at each waypoint"
        )

        direction = st.radio(
            "Flight Path Direction",
            ('north_south', 'east_west'),
            format_func=lambda x: "North-South" if x == 'north_south' else "East-West"
        )

        rotation_deg = st.slider(
            "Grid Rotation (¬∞)",
            min_value=-90,
            max_value=90,
            value=0,
            step=1,
            help="Rotate the grid to align with your AOI (e.g., a field row direction)"
        )


        if st.button(f"üöÄ Generate {direction.replace('_', '-')} Flight Plan"):
>>>>>>> c9db1d8a0b2aa28d45bdc54caf685cc286e8f6e6
            if st.session_state.area_bounds:
                try:
                    path = generate_grid_path(
                        area_width=st.session_state.area_bounds['width'],
                        area_height=st.session_state.area_bounds['height'],
                        overlap=overlap,
                        sidelap=sidelap,
                        altitude=altitude,
                        speed=speed,
                        interval=interval,
                        fov=fov,
                        center_lat=st.session_state.area_bounds['center_lat'],
                        center_lon=st.session_state.area_bounds['center_lon'],
                        direction=direction
                        rotation_deg=rotation_deg
                    )
                    st.session_state.flight_paths[direction] = path
                    st.success("‚úÖ Flight plan generated!")
                except Exception as e:
                    st.error(f"Error: {e}")
altitude = st.number_input("Altitude (m)", min_value=1, value=50)            else:
                st.warning("Please draw an AOI first.")

    if any(st.session_state.flight_paths.values()):
        st.subheader("üß≠ Generated Flight Plans")
        plan_map = folium.Map(
            location=[st.session_state.area_bounds['center_lat'], st.session_state.area_bounds['center_lon']],
            zoom_start=15,
            tiles="CartoDB positron"
        )
        colors = {'north_south': 'blue', 'east_west': 'magenta'}
        for direction, path in st.session_state.flight_paths.items():
            if path:
                points = [[coord[1], coord[0]] for coord in path]
                folium.PolyLine(points, color=colors[direction], weight=2.5).add_to(plan_map)

        st_folium(plan_map, width=900, height=600)

        for direction, path in st.session_state.flight_paths.items():
            if path:
                df = pd.DataFrame(path, columns=["Longitude", "Latitude"])
                st.download_button(f"üì• Download {direction.replace('_', '-')}.CSV", df.to_csv(index=False), f"{direction}.csv")
                kmz_file = create_kml_file(path, {'altitude': altitude, 'speed': speed})
                with open(kmz_file, 'rb') as f:
                    st.download_button(f"üì• Download {direction.replace('_', '-')}.KMZ", f, file_name=kmz_file)
                os.remove(kmz_file)

    st.markdown("""
    ---
    <div style='text-align: center'>
        Created by <a href='https://www.linkedin.com/in/michaelostrager' target='_blank'>Michael Ostrager</a>  
        ¬© 2025 ‚Ä¢ <a href='https://openflightplan.io' target='_blank'>openflightplan.io</a>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
